---
- name: 创建工作目录
  file: dest={{ k8s_work_dir }}/{{ item }} state=directory
  with_items:
    - bin
    - cfg
    - ssl
    - logs

- name: 创建etcd证书目录
  file: dest={{ k8s_work_dir }}/ssl/etcd state=directory

- name: 创建临时目录
  file: dest={{ tmp_dir }} state=directory

- name: 创建RBAC k8s YAML目录
  file: dest={{ k8s_yaml_dir }}/{{ item }} state=directory
  with_items:
    - rbac

- name: 分发并解压k8s二进制包
  unarchive: src={{ item }} dest={{ tmp_dir }}
  with_fileglob:
    - "{{ software_dir }}/kubernetes-server-v1.28.1-linux-amd64.tar.gz"

- name: 移动k8s master二进制文件
  shell: cp -rf {{ tmp_dir }}/kubernetes/server/bin/{kube-apiserver,kube-controller-manager,kube-scheduler} {{ k8s_work_dir }}/bin && \
         cp -rf {{ tmp_dir }}/kubernetes/server/bin/kubectl /usr/bin

- name: 分发k8s证书
  copy: src={{ ssl_dir }}/k8s/{{ item }} dest={{ k8s_work_dir }}/ssl
  with_items:
    - ca.pem
    - ca-key.pem
    - server.pem
    - server-key.pem
    - kube-controller-manager.pem
    - kube-controller-manager-key.pem
    - kube-scheduler.pem
    - kube-scheduler-key.pem
    - admin.pem
    - admin-key.pem

- name: 分发etcd证书
  copy: src={{ ssl_dir }}/etcd/{{ item }} dest={{ k8s_work_dir }}/ssl/etcd
  with_items:
    - ca.pem
    - server.pem
    - server-key.pem

- name: 分发token文件
  copy: src=token.csv dest={{ k8s_work_dir }}/cfg

- name: 分发k8s配置文件
  template: src={{ item }} dest={{ k8s_work_dir }}/cfg/{{ item.split('.')[:-1]|join('.') }}
  with_items:
    - kube-apiserver.conf.j2
    - kube-controller-manager.conf.j2
    - kube-scheduler.conf.j2
    - kube-controller-manager.kubeconfig.j2
    - kube-scheduler.kubeconfig.j2

- name: 建立软链接
  file: src={{ k8s_work_dir }} dest={{ k8s_link_dir }} state=link

- name: 分发service文件
  template: src={{ item }} dest=/usr/lib/systemd/system/{{ item.split('.')[:-1]|join('.') }}
  with_items:
    - kube-apiserver.service.j2
    - kube-controller-manager.service.j2
    - kube-scheduler.service.j2

- name: 启动k8s master组件
  systemd: name={{ item }} state=restarted enabled=yes daemon_reload=yes
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: 创建kubectl配置文件目录
  file: dest=/root/.kube state=directory
- name: 分发k8s配置文件
  template: src=config.j2 dest=/root/.kube/config

- name: 查看集群状态
  shell: sleep 3 && kubectl get cs
  register: cs
- debug: var=cs.stdout_lines

- name: 拷贝RBAC YAML文件
  copy: src={{ item }} dest={{ k8s_yaml_dir }}/rbac
  with_items:
    - kubelet-bootstrap-rbac.yaml
    - apiserver-to-kubelet-rbac.yaml
    - admin-user-rbac.yaml

- name: 授权APIServer访问Kubelet与授权kubelet bootstrap
  ignore_errors: yes
  shell: |
      sleep 3
      kubectl apply -f {{ k8s_yaml_dir }}/rbac/apiserver-to-kubelet-rbac.yaml
      kubectl apply -f {{ k8s_yaml_dir }}/rbac/kubelet-bootstrap-rbac.yaml
      kubectl apply -f {{ k8s_yaml_dir }}/rbac/admin-user-rbac.yaml

- name: 自动审批Kubelet证书
  ignore_errors: yes
  shell: |
     #自动批准首次申请证书的CSR请求 
     kubectl create clusterrolebinding node-client-auto-approve-csr --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient --user=kubelet-bootstrap 
     # 自动批准kubelet客户端证书续签 
     kubectl create clusterrolebinding node-client-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient --group=system:nodes 
     # 自动批准kubelet服务端证书续签 
     kubectl create clusterrolebinding node-server-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeserver --group=system:nodes

